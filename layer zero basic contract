// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.8.2 <0.9.0;

import "https://github.com/LayerZero-Labs/solidity-examples/blob/main/contracts/lzApp/LzApp.sol";

/**
 * @title Storage
 * @dev Store & retrieve value in a variable
 * @custom:dev-run-script ./scripts/deploy_with_ethers.ts
 */
contract Storage is LzApp {

    constructor(address _lzAppEndpoint) LzApp(_lzAppEndpoint) Ownable(msg.sender) {}

    uint256 number;

    /**
     * @dev Store value in variable
     * @param num value to store
     */
    function store(uint256 num, uint16 dstChainId) public payable {
        bytes memory payload = abi.encodePacked(num);
        _lzSend(dstChainId, payload, payable(msg.sender), address(0x0), bytes(""), msg.value);
        number = num;
    }

    function _blockingLzReceive(uint16 /* _srcChainId */, bytes memory /* _srcAddress */, uint64 /* _nonce */, bytes memory _payload) internal override {
    uint256 num = abi.decode(_payload, (uint256));
    number = num;
    }

    /**
     * @dev Return value 
     * @return value of 'number'
     */
    function retrieve() public view returns (uint256){
        return number;
    }
}
